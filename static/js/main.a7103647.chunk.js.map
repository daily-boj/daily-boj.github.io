{"version":3,"sources":["constants.ts","styles/vars.ts","components/Navbar.tsx","pages/IndexPage/index.tsx","pages/Branding/index.tsx","pages/Calendar/index.tsx","pages/Member/index.tsx","components/Icon.tsx","components/Link.tsx","pages/Newbie/index.tsx","pages/Stat/Solve/index.tsx","pages/Stat/Tier/index.tsx","pages/Errors/PageNotFound.tsx","App.tsx","service-worker.ts","styles/reset.ts","styles/default.ts","styles/font.ts","index.tsx"],"names":["asset","path","process","PUBLIC_URL","NavbarBackground","hsl","NavbarBackgroundHover","NavbarBackgroundSelected","MenuSelected","IntroductionBackground","introductionForeground","CatchphraseBackground","CatchphraseForeground","CodeBackground","CodeForeground","DropShadow","hsla","InnerShadow","Background","CollapseButton","NavbarHeader","Vars","NavbarFake","Brand","Logo","Collapse","TogglerView","Navbar","type","id","to","data","css","htmlFor","Introduction","styled","div","Catchphrase","IndexPage","className","BrandingPage","CalendarPage","MemberPage","icon","material","Icon","kind","value","Link","External","children","props","URL","host","href","Internal","NewbiePage","StatSolvePage","StatTierPage","ErrorPageNotFound","App","exact","Boolean","window","location","hostname","match","a","navigator","serviceWorker","ready","registration","unregister","console","error","message","StyleReset","StyleDefault","StyleFont","ReactDOM","render","StrictMode","styles","document","getElementById"],"mappings":"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","file":"static/js/main.a7103647.chunk.js","sourcesContent":["export const PUBLIC_URL = process.env.PUBLIC_URL;\n\nexport function asset(path: string): string {\n  if (path[0] === '/') {\n    return PUBLIC_URL + path;\n  } else {\n    return PUBLIC_URL + '/' + path;\n  }\n}","import { hsl, hsla } from 'polished';\n\n// navbar\nexport const NavbarBackground = hsl(230, 0.05, 0.90);\nexport const NavbarBackgroundHover = hsl(230, 0.05, 1.00);\nexport const NavbarBackgroundSelected = hsl(230, 0.05, 0.80);\n\nexport const MenuSelected = hsl(230, 0.60, 0.60);\n\n// index page\nexport const IntroductionBackground = hsl(0, 0.10, 0.95);\nexport const introductionForeground = hsl(230, 0.10, 0.05);\n\nexport const CatchphraseBackground = hsl(0, 0.10, 0.95);\nexport const CatchphraseForeground = hsl(230, 0.10, 0.05);\n\n// global\nexport const CodeBackground = hsl(230, 0.15, 0.65);\nexport const CodeForeground = hsl(40, 0.75, 0.75);\n\nexport const DropShadow = `2px 4px 32px ${hsla(0, 0.05, 0.05, 0.3)}`;\nexport const InnerShadow = `\n  inset 2px 2px 7px ${hsla(0, 0.05, 0.05, 0.2)},\n  inset -2px -2px 7px ${hsla(0, 0.05, 0.05, 0.2)};\n`;\n\nexport const Link = hsl(230, 0.85, 0.75);\nexport const LinkVisited = hsl(270, 0.85, 0.75);\n\nexport const TransitionTiming = 'ease-out';\nexport const TransitionDuration = '0.2s';\n\nexport const Background = hsl(230, 0.25, 0.80);\n\n","/* @jsx jsx */\n\nimport React, { FC, Fragment } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport { NavLink } from 'react-router-dom';\nimport { asset } from '../constants';\nimport styled from '@emotion/styled/macro';\nimport * as Vars from '../styles/vars';\n\nconst CollapseButton = styled.input`\n  position: absolute;\n  visibility: hidden;\n`;\nconst NavbarHeader = styled.header`\n  background-color: ${Vars.NavbarBackground};\n  font-size: 1.5rem;\n\n  width: 100%;\n  height: 3rem;\n\n  position: fixed;\n  top: 0;\n\n  display: grid;\n\n  z-index: 100;\n\n  user-select: none;\n\n  a { \n    height: 100%;\n  }\n\n  a, nav {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  nav {\n    padding: 0 1rem;\n    height: 100%;\n\n    transition: ${Vars.TransitionTiming} background-color, box-shadow ${Vars.TransitionDuration};\n  }\n  \n  a:not(.active) > nav:hover {\n    background-color: ${Vars.NavbarBackgroundHover};\n    box-shadow: ${Vars.DropShadow};\n  }\n\n  a.active > nav {\n    background-color: ${Vars.NavbarBackgroundSelected};\n    color: ${Vars.MenuSelected};\n    border-color: ${Vars.MenuSelected};\n    box-shadow: ${Vars.InnerShadow};\n  }\n  \n\tgrid-template-columns: auto 1fr;\n\tgrid-template-rows: 3rem auto;\n\n  @media screen and (min-width: 600px) {\n    grid-template-areas:\n        'brand nav'\n        'brand nav';\n\n    nav {\n      border-bottom: 4px solid transparent;\n    }\n  }\n  @media screen and (max-width: 599px) {\n    ${CollapseButton}:not(:checked) ~ & {\n      height: calc(3rem * 4);\n    }\n    ${CollapseButton}:checked ~ & {\n      grid-template-areas:\n          'brand toggler'\n          'brand toggler';\n    }\n    ${CollapseButton}:not(:checked) ~ & {\n      grid-template-areas:\n          'brand toggler'\n          '  nav     nav';\n    }\n    \n    nav {\n      width: 100%;\n      border-left: 4px solid transparent;\n    }\n  }\n`;\nconst NavbarFake = styled.div`\n  height: 3rem;\n\n  @media screen and (max-width: 599px) {\n    ${CollapseButton}:not(:checked) ~ & {\n      height: calc(3rem * 4);\n    }\n  }\n`;\nconst Brand = styled.span`\n  margin: 0 1rem;\n  grid-area: brand;\n`;\nconst Logo = styled.object`\n  height: 1em;\n  max-width: 1em;\n  vertical-align: middle;\n  margin-right: 0.2rem;\n`;\nconst Collapse = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  grid-area: nav;\n\n  @media screen and (min-width: 600px) {\n    flex-direction: row;\n  }\n\n  @media screen and (max-width: 599px) {\n    flex-direction: column;\n    align-items: stretch;\n    transition: ${Vars.TransitionTiming} height ${Vars.TransitionDuration};\n    \n    ${CollapseButton}:checked ~ ${NavbarHeader} & {\n      display: none;\n    }\n  }\n`;\nconst TogglerView = styled.label`\n  grid-area: toggler;\n  margin-left: auto;\n  cursor: pointer;\n\n  &::before {\n    font-family: 'Material Icons Outlined';\n    font-feature-settings: 'liga';\n    letter-spacing: normal;\n    line-height: 1;\n    font-size: 24px;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    \n    width: 3rem;\n    height: 3rem;\n    \n    ${CollapseButton}:checked ~ ${NavbarHeader} & {\n      content: 'menu';\n    }\n    ${CollapseButton}:not(:checked) ~ ${NavbarHeader} & {\n      content: 'close';\n    }\n  }\n  \n  @media screen and (min-width: 600px) {\n    display: none;\n  }\n`;\n\nconst Navbar: FC = () => (\n  <Fragment>\n    <CollapseButton type=\"checkbox\" id=\"collapse-button\" />\n    <NavbarHeader>\n      <NavLink to=\"/\">\n        <Brand>\n          <Logo type=\"image/svg+xml\" data={asset('images/logo.svg')}>\n            Daily BOJ Logo\n          </Logo>\n          <span>\n            <span css={css`font-weight: 500;`}>{'Daily'}</span>&nbsp;\n            <span css={css`font-weight: 700;`}>{'BOJ'}</span>\n          </span>\n        </Brand>\n      </NavLink>\n\n      <TogglerView htmlFor=\"collapse-button\" />\n\n      <Collapse>\n        <NavLink to=\"/newbie\">\n          <nav id=\"nav-newbie\">\n            신입 가이드\n          </nav>\n        </NavLink>\n        <NavLink to=\"/member\">\n          <nav id=\"nav-member\">\n            멤버\n          </nav>\n        </NavLink>\n        <NavLink to=\"/calendar\">\n          <nav id=\"nav-calendar\" >\n            달력\n          </nav>\n        </NavLink>\n      </Collapse>\n    </NavbarHeader>\n    <NavbarFake />\n  </Fragment>\n);\n\n\nexport default Navbar;","/* @jsx jsx */\n\nimport React, { FC, Fragment } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport * as Vars from '../../styles/vars';\n\nconst Introduction = styled.div`\n  display: inline-block;\n\n  background-color: ${Vars.IntroductionBackground};\n  color: ${Vars.introductionForeground};\n\n  margin: 32px;\n\n  @media screen and (max-width: 899px) {\n    margin: 0;\n    padding: 1rem 1rem;\n  }\n  @media screen and (min-width: 900px) {\n    max-width: 768px;\n    padding: 4rem 2rem;\n  }\n`;\n\nconst Catchphrase = styled.div`\n  margin: 1.2rem;\n  position: absolute;\n  text-align: right;\n  .line {\n    display: inline-block;\n\n    padding: 0.2rem 2rem;\n\n    background-color: ${Vars.CatchphraseBackground};\n    color: ${Vars.CatchphraseForeground};\n\n    box-shadow: ${Vars.DropShadow};\n\n    user-select: none;\n  }\n  br {\n    line-height: 2em;\n  }\n  .highlight {\n    font-weight: 700;\n  }\n  \n  @media screen and (max-width: 899px) {\n    font-size: 4vw;\n    right: 0;\n  }\n  @media screen and (min-width: 900px) {\n    font-size: 2.5rem;\n    bottom: 6rem;\n    right: 4rem;\n  }\n  @media screen and (max-height: 800px) {\n    position: relative;\n    bottom: 0;\n    right: 0;\n  }\n  @media screen and (max-width: 400px) {\n    display: none;\n  }\n`;\n\nconst IndexPage: FC = () => (\n  <Fragment>\n    <div css={css`\n      position: relative;\n      height: calc(100vh - 4rem);\n    `}>\n      <Introduction>\n        데일리 백준은 알고리즘 문제 풀이를 하는 소모임입니다.\n        <br />\n        <br />\n        {'매일매일 참가자들끼리 토론으로 문제를 선정하고, '}\n        {'문제를 푸는 데에 어려움이 있다면 서로 질문을 나눕니다. '}\n        {'코드를 보고 반례를 찾아주기도 하며, '}\n        {'문제를 푸는 데에 필요한 알고리즘을 같이 배우기도 합니다.'}\n        <br />\n        <br />\n        {'본 모임은 알고리즘 실력을 진일보시키는 것에 목적을 두고 있습니다. '}\n        {'또한, 알고리즘 관련 자료를 공개해 지식을 나누는 데에도 뜻을 두고 있습니다. '}\n        <br />\n        <br />\n        {'이 모임에서 지켜야 하는 규칙은 아주 간단합니다. '}\n        {'매일 한 문제를 푸는 것뿐입니다. '}\n      </Introduction>\n      <Catchphrase>\n        <span className=\"line\">\n          데일리&nbsp;백준으로\n          {' '}\n          <span className=\"highlight\">\n            하루에\n          </span>\n        </span>\n        <br />\n        <span className=\"line\">\n          적어도\n          {' '}\n          <span className=\"highlight\">\n            한&nbsp;문제\n          </span>\n          는 풀어봅시다\n        </span>\n      </Catchphrase>\n    </div>\n  </Fragment>\n);\n\nexport default IndexPage;","/* @jsx jsx */\n\nimport React, { FC, Fragment } from 'react';\nimport { jsx } from '@emotion/core';\n\nconst BrandingPage: FC = () => (\n  <Fragment>\n    Can we branding daily-boj\n  </Fragment>\n);\n\nexport default BrandingPage;\n","/* @jsx jsx */\n\nimport React, { FC, Fragment } from 'react';\nimport { jsx } from '@emotion/core';\n\nconst CalendarPage: FC = () => (\n  <Fragment>\n    Calendar! Core feature of daily boj homepage\n  </Fragment>\n);\n\nexport default CalendarPage;","/* @jsx jsx */\n\nimport React, { FC, Fragment } from 'react';\nimport { jsx } from '@emotion/core';\n\nconst MemberPage: FC = () => (\n  <Fragment>\n    This group contains a lot of goinmul\n  </Fragment>\n);\n\nexport default MemberPage;","/* @jsx jsx */\n\nimport React, { FC } from 'react';\nimport { jsx } from '@emotion/core';\nimport { asset } from '../constants';\nimport { css } from '@emotion/core';\n\nexport type IconKind = 'solved-ac' | 'boj' | 'material' | 'devicons';\n\nexport interface IconProps {\n  kind: IconKind;\n  value?: string;\n}\n\nconst icon = css`\n  height: 1em;\n  max-width: 1em;\n  vertical-align: middle;\n  text-decoration: none;\n  display: inline-block;\n  pointer-events: none;\n`;\nconst material = css`\n  font-family: 'Material Icons Outlined';\n  font-feature-settings: 'liga';\n  letter-spacing: normal;\n  line-height: 1;\n`;\n\nconst Icon: FC<IconProps> = ({ kind, value }) => {\n  if (kind === 'solved-ac') {\n    return (\n      <object css={icon} type=\"image/svg+xml\" data=\"https://static.solved.ac/logo.svg\">\n        Solved AC Icon\n      </object>\n    );\n  } else if (kind === 'boj') {\n    return (\n      <object css={icon} type=\"image/svg+xml\" data={asset('images/baekjoon-square.svg')}>\n        Baekjoon Online Judge Icon\n      </object>\n    );\n  } else if (kind === 'material') {\n    return (\n      <span css={[icon, material]}>\n        {value}\n      </span>\n    );\n  } else if (kind === 'devicons') {\n    return (\n      <span css={[icon]} className=\"devicons\">\n        {value}\n      </span>\n    );\n  }\n  return null;\n};\n\nexport default Icon;","import React, { FC, ReactNode } from 'react';\nimport { jsx } from '@emotion/core';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Icon from './Icon';\n\ntype LinkBase = Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href'>;\n\nexport interface ExternalLinkProps extends LinkBase {\n  to: string;\n  children: ReactNode;\n}\n\nconst External: FC<ExternalLinkProps> = ({ to, children, ...props }) => {\n  let icon = <Icon kind='material' value='launch' />;\n  try {\n    const url = new URL(to);\n    switch (url.host) {\n      case 'solved.ac': {\n        icon = <Icon kind='solved-ac' />;\n        break;\n      }\n      case 'acmicpc.net':\n      case 'www.acmicpc.net':\n      case 'noj.am':\n      case 'boj.kr': {\n        icon = <Icon kind='boj' />;\n        break;\n      }\n      case 'github.com': {\n        icon = <Icon kind='devicons' value={'\\ue609'} />;\n        break;\n      }\n      default: {\n        icon = <Icon kind='material' value='launch' />;\n      }\n    }\n  } catch { /* ignore error */ }\n\n  return (\n    <a className=\"link external\" href={to} {...props} >\n      {icon}\n      {children}\n    </a >\n  );\n};\n\nexport interface InternalLinkProps extends LinkBase {\n  to: string;\n  children: ReactNode;\n}\n\nconst Internal: FC<InternalLinkProps> = ({ to, children, ...props }) => (\n  <RouterLink to={to} className=\"link internal\" {...props}>\n    {children}\n  </RouterLink>\n);\n\nconst Link = {\n  External,\n  Internal,\n};\n\nexport default Link;","import React, { FC } from 'react';\nimport { jsx } from '@emotion/core';\nimport Link from '../../components/Link';\n\nconst NewbiePage: FC = () => (\n  <ul>\n    <li>\n      <Link.Internal to=\"member\">\n        관리자\n      </Link.Internal>\n      에게 그룹 초대를 요청해주세요.\n      <ul>\n        <li>\n          <Link.External to=\"https://www.acmicpc.net/group/7875\">\n            Baekjoon Online Judge\n          </Link.External>\n        </li>\n        <li>\n          <Link.External to=\"https://github.com/daily-boj/\">\n            GitHub\n          </Link.External>\n        </li>\n      </ul>\n    </li>\n    <li>\n      매일 00시, 백준 그룹에서 연습을 진행해요.\n      <ul>\n        <li>\n          평일에는 하루 동안 난이도 순으로 A, B, C라는 이름이 붙은 문제 3개를 풀어요.\n        </li>\n        <li>\n          토, 일 동안에는 일주일 간 푼 문제 속에서{' '}\n          <b>4명 이하가 푼 문제</b>\n          를 놓고, 복습할 문제를 정해 복습해요.\n        </li>\n      </ul>\n      문제의 이상에 대한 토론이나 반례 모집 등은 언제든 환영하고 있어요.\n    </li>\n    <li>\n      어느 문제를 풀든 자유지만,\n      {' '}\n      <b>매일 최소 한 문제</b>\n      는 풀어주세요.\n    </li>\n    <li>\n      매일 23시, 뒷풀이 시간을 가져요. 뒷풀이 시간엔 이런 일을 해요.\n      <ul>\n        <li>내일 문제 정하기</li>\n        <li>내가 푼 문제 풀이 공유하기</li>\n        <li>못 푼 문제 풀이 물어보기</li>\n      </ul>\n      복습의 날 이전에는 예외적으로 문제 풀이만 공유해요.\n    </li>\n    <li>\n      <Link.External to=\"https://solved.ac\">\n        solved.ac 확장\n      </Link.External  >\n      을 설치하면 문제 레벨이 보여서 도움이 돼요.\n    </li >\n    <li>\n      GitHub에는 자기 닉네임으로 저장소를 만들어서 이런 일을 해요.\n      <ul>\n        <li>\n          <code>P(문제번호).(확장자)</code>\n          의 형태로 풀이 코드를 올려요.\n        </li>\n        <li>\n          문제의 접근 방식, 해설 등을 작성해요.\n        </li>\n      </ul>\n      코드를 GitHub에 올리는 것은 필수가 아니지만 가능하면 올려주세요.\n    </li>\n  </ul>\n);\n\nexport default NewbiePage;","import React, { FC, Fragment } from 'react';\nimport { jsx } from '@emotion/core';\n\nconst StatSolvePage: FC = () => (\n  <Fragment>\n    {'Statistics of solve rate'}\n  </Fragment>\n);\n\nexport default StatSolvePage;","import React, { FC, Fragment } from 'react';\nimport { jsx } from '@emotion/core';\n\nconst StatTierPage: FC = () => (\n  <Fragment>\n    Have we solved Gold IV? wow\n  </Fragment>\n);\n\nexport default StatTierPage;","import React, { FC, Fragment } from 'react';\nimport { jsx } from '@emotion/core';\n\nconst ErrorPageNotFound: FC = () => (\n  <Fragment>\n    404 page not found\n  </Fragment>\n);\n\nexport default ErrorPageNotFound;","/* @jsx jsx */\n\nimport React, { FC, Fragment } from 'react';\nimport { jsx } from '@emotion/core';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport * as Pages from './pages';\n\nconst App: FC = () => (\n  <BrowserRouter>\n    <Fragment>\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/branding\">\n          <Pages.Branding />\n        </Route>\n        <Route exact path=\"/calendar\">\n          <Pages.Calendar />\n        </Route>\n        <Route exact path=\"/member\">\n          <Pages.Member />\n        </Route>\n        <Route exact path=\"/newbie\">\n          <Pages.Newbie />\n        </Route>\n        <Route exact path=\"/stat/solve\">\n          <Pages.StatSolve />\n        </Route>\n        <Route exact path=\"/stat/tier\">\n          <Pages.StatTier />\n        </Route>\n        <Route exact path=\"/\">\n          <Pages.Index />\n        </Route>\n        <Route>\n          <Pages.ErrorPageNotFound />\n        </Route>\n      </Switch>\n    </Fragment>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = Partial<{\n  onSuccess(registration: ServiceWorkerRegistration): void;\n  onUpdate(registration: ServiceWorkerRegistration): void;\n}>;\n\nasync function registerValidSW(swUrl: string, config?: Config): Promise<void> {\n  try {\n    const registration = await navigator.serviceWorker.register(swUrl);\n    registration.onupdatefound = (): void => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = (): void => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\n              'New content is available and will be used when all ' +\n              'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n            );\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  } catch (error) {\n    console.error('Error during service worker registration:', error);\n  }\n}\n\nasync function checkValidServiceWorker(swUrl: string, config?: Config): Promise<void> {\n  // Check if the service worker can be found. If it can't reload the page.\n  try {\n    const response = await fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    });\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf('javascript') === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      const registration = await navigator.serviceWorker.ready;\n      await registration.unregister();\n      window.location.reload();\n    } else {\n      // Service worker found. Proceed as normal.\n      await registerValidSW(swUrl, config);\n    }\n  } catch {\n    console.log(\n      'No internet connection found. App is running in offline mode.'\n    );\n  }\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', async () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        await checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        await navigator.serviceWorker.ready;\n        console.log(\n          'This web app is being served cache-first by a service ' +\n          'worker. To learn more, visit https://bit.ly/CRA-PWA'\n        );\n      } else {\n        // Is not localhost. Just register service worker\n        await registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport async function unregister(): Promise<void> {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      await registration.unregister();\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n}\n","import { css } from '@emotion/core';\n\nconst StyleReset = css`\nhtml, body, #root {\n    padding: 0;\n    margin: 0;\n\n    min-height: 100vh;\n    max-width: 100vw; \n\n    box-sizing: border-box;\n}\n\na {\n    color: unset;\n    text-decoration: unset;\n}\n`;\n\nexport default StyleReset;","import { css } from '@emotion/core';\nimport * as Vars from './vars';\n\nconst StyleDefault = css`\n:lang(ko) {\n    word-break: keep-all;\n}\n\nbody {\n    background-color: ${Vars.Background};\n    letter-spacing: -0.04em;\n    font-size: 1.3rem;\n}\n\n#root {\n    max-width: 100vw;\n}\n\ncode {\n    background-color: ${Vars.CodeBackground};\n    color: ${Vars.CodeForeground};\n    padding: 0.2em 0.4em;\n    border-radius: 0.4em;\n}\n`;\n\nexport default StyleDefault;","import { css } from '@emotion/core';\nimport { asset } from '../constants';\n\nconst StyleFont = css`\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-Thin.woff2')}) format('woff2');\n    font-style: normal;\n    font-weight: 100;\n}\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-Light.woff2')}) format('woff2');\n    font-style: normal;\n    font-weight: 300;\n}\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-Regular.woff2')}) format('woff2');\n    font-style: normal;\n    font-weight: 400;\n}\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-Medium.woff2')}) format('woff2');\n    font-style: normal;\n    font-weight: 500;\n}\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-Bold.woff2')}) format('woff2');\n    font-style: normal;\n    font-weight: 700;\n}\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-Black.woff2')}) format('woff2');\n    font-style: normal;\n    font-weight: 900;\n}\n\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-ThinItalic.woff2')}) format('woff2');\n    font-style: italic;\n    font-weight: 100;\n}\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-LightItalic.woff2')}) format('woff2');\n    font-style: italic;\n    font-weight: 300;\n}\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-RegularItalic.woff2')}) format('woff2');\n    font-style: italic;\n    font-weight: 400;\n}\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-MediumItalic.woff2')}) format('woff2');\n    font-style: italic;\n    font-weight: 500;\n}\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-BoldItalic.woff2')}) format('woff2');\n    font-style: italic;\n    font-weight: 700;\n}\n@font-face {\n    font-family: Metropolis;\n    src: url(${asset('fonts/metropolis/Metropolis-BlackItalic.woff2')}) format('woff2');\n    font-style: italic;\n    font-weight: 900;\n}\n\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100;300;400;500;700;900&display=swap');\n\nhtml {\n    font-family: -apple-system, BlinkMacSystemFont, Metropolis, Noto Sans KR, sans-serif;\n}\n`;\n\nexport default StyleFont;","/* @jsx jsx */\n\nimport React from 'react';\nimport { jsx } from '@emotion/core';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './service-worker';\nimport StyleReset from './styles/reset';\nimport StyleDefault from './styles/default';\nimport StyleFont from './styles/font';\nimport { Global } from '@emotion/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Global styles={[StyleReset, StyleFont, StyleDefault]} />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}